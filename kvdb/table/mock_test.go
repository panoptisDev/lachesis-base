// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package table is a generated GoMock package.
package table

import (
	reflect "reflect"

	kvdb "github.com/panoptisDev/lachesis-base/kvdb"
	gomock "github.com/golang/mock/gomock"
)

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBatch) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBatchMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatch)(nil).Delete), key)
}

// Put mocks base method.
func (m *MockBatch) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockBatchMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBatch)(nil).Put), key, value)
}

// Replay mocks base method.
func (m *MockBatch) Replay(w kvdb.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replay indicates an expected call of Replay.
func (mr *MockBatchMockRecorder) Replay(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockBatch)(nil).Replay), w)
}

// Reset mocks base method.
func (m *MockBatch) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBatchMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBatch)(nil).Reset))
}

// ValueSize mocks base method.
func (m *MockBatch) ValueSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// ValueSize indicates an expected call of ValueSize.
func (mr *MockBatchMockRecorder) ValueSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueSize", reflect.TypeOf((*MockBatch)(nil).ValueSize))
}

// Write mocks base method.
func (m *MockBatch) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockBatchMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBatch)(nil).Write))
}

// MockIterator is a mock of Iterator interface.
type MockIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIteratorMockRecorder
}

// MockIteratorMockRecorder is the mock recorder for MockIterator.
type MockIteratorMockRecorder struct {
	mock *MockIterator
}

// NewMockIterator creates a new mock instance.
func NewMockIterator(ctrl *gomock.Controller) *MockIterator {
	mock := &MockIterator{ctrl: ctrl}
	mock.recorder = &MockIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterator) EXPECT() *MockIteratorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockIterator)(nil).Error))
}

// Key mocks base method.
func (m *MockIterator) Key() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockIteratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockIterator)(nil).Key))
}

// Next mocks base method.
func (m *MockIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIterator)(nil).Next))
}

// Release mocks base method.
func (m *MockIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockIterator)(nil).Release))
}

// Value mocks base method.
func (m *MockIterator) Value() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockIterator)(nil).Value))
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockWriter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), key)
}

// Put mocks base method.
func (m *MockWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockWriter)(nil).Put), key, value)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReader)(nil).Get), key)
}

// Has mocks base method.
func (m *MockReader) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockReader)(nil).Has), key)
}

// MockIteratedReader is a mock of IteratedReader interface.
type MockIteratedReader struct {
	ctrl     *gomock.Controller
	recorder *MockIteratedReaderMockRecorder
}

// MockIteratedReaderMockRecorder is the mock recorder for MockIteratedReader.
type MockIteratedReaderMockRecorder struct {
	mock *MockIteratedReader
}

// NewMockIteratedReader creates a new mock instance.
func NewMockIteratedReader(ctrl *gomock.Controller) *MockIteratedReader {
	mock := &MockIteratedReader{ctrl: ctrl}
	mock.recorder = &MockIteratedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIteratedReader) EXPECT() *MockIteratedReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIteratedReader) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIteratedReaderMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIteratedReader)(nil).Get), key)
}

// Has mocks base method.
func (m *MockIteratedReader) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockIteratedReaderMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockIteratedReader)(nil).Has), key)
}

// NewIterator mocks base method.
func (m *MockIteratedReader) NewIterator(prefix, start []byte) kvdb.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(kvdb.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockIteratedReaderMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockIteratedReader)(nil).NewIterator), prefix, start)
}

// MockSnapshot is a mock of Snapshot interface.
type MockSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotMockRecorder
}

// MockSnapshotMockRecorder is the mock recorder for MockSnapshot.
type MockSnapshotMockRecorder struct {
	mock *MockSnapshot
}

// NewMockSnapshot creates a new mock instance.
func NewMockSnapshot(ctrl *gomock.Controller) *MockSnapshot {
	mock := &MockSnapshot{ctrl: ctrl}
	mock.recorder = &MockSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshot) EXPECT() *MockSnapshotMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSnapshot) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSnapshotMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSnapshot)(nil).Get), key)
}

// Has mocks base method.
func (m *MockSnapshot) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockSnapshotMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockSnapshot)(nil).Has), key)
}

// NewIterator mocks base method.
func (m *MockSnapshot) NewIterator(prefix, start []byte) kvdb.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(kvdb.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockSnapshotMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockSnapshot)(nil).NewIterator), prefix, start)
}

// Release mocks base method.
func (m *MockSnapshot) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockSnapshotMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockSnapshot)(nil).Release))
}

// MockSnapshoter is a mock of Snapshoter interface.
type MockSnapshoter struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshoterMockRecorder
}

// MockSnapshoterMockRecorder is the mock recorder for MockSnapshoter.
type MockSnapshoterMockRecorder struct {
	mock *MockSnapshoter
}

// NewMockSnapshoter creates a new mock instance.
func NewMockSnapshoter(ctrl *gomock.Controller) *MockSnapshoter {
	mock := &MockSnapshoter{ctrl: ctrl}
	mock.recorder = &MockSnapshoterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapshoter) EXPECT() *MockSnapshoterMockRecorder {
	return m.recorder
}

// GetSnapshot mocks base method.
func (m *MockSnapshoter) GetSnapshot() (kvdb.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].(kvdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockSnapshoterMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockSnapshoter)(nil).GetSnapshot))
}

// MockBatcher is a mock of Batcher interface.
type MockBatcher struct {
	ctrl     *gomock.Controller
	recorder *MockBatcherMockRecorder
}

// MockBatcherMockRecorder is the mock recorder for MockBatcher.
type MockBatcherMockRecorder struct {
	mock *MockBatcher
}

// NewMockBatcher creates a new mock instance.
func NewMockBatcher(ctrl *gomock.Controller) *MockBatcher {
	mock := &MockBatcher{ctrl: ctrl}
	mock.recorder = &MockBatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatcher) EXPECT() *MockBatcherMockRecorder {
	return m.recorder
}

// NewBatch mocks base method.
func (m *MockBatcher) NewBatch() kvdb.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(kvdb.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockBatcherMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockBatcher)(nil).NewBatch))
}

// MockIteratee is a mock of Iteratee interface.
type MockIteratee struct {
	ctrl     *gomock.Controller
	recorder *MockIterateeMockRecorder
}

// MockIterateeMockRecorder is the mock recorder for MockIteratee.
type MockIterateeMockRecorder struct {
	mock *MockIteratee
}

// NewMockIteratee creates a new mock instance.
func NewMockIteratee(ctrl *gomock.Controller) *MockIteratee {
	mock := &MockIteratee{ctrl: ctrl}
	mock.recorder = &MockIterateeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIteratee) EXPECT() *MockIterateeMockRecorder {
	return m.recorder
}

// NewIterator mocks base method.
func (m *MockIteratee) NewIterator(prefix, start []byte) kvdb.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(kvdb.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockIterateeMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockIteratee)(nil).NewIterator), prefix, start)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AncientDatadir mocks base method.
func (m *MockStore) AncientDatadir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AncientDatadir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AncientDatadir indicates an expected call of AncientDatadir.
func (mr *MockStoreMockRecorder) AncientDatadir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AncientDatadir", reflect.TypeOf((*MockStore)(nil).AncientDatadir))
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Compact mocks base method.
func (m *MockStore) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockStoreMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockStore)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockStore) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), key)
}

// Drop mocks base method.
func (m *MockStore) Drop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop.
func (mr *MockStoreMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockStore)(nil).Drop))
}

// Get mocks base method.
func (m *MockStore) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), key)
}

// GetSnapshot mocks base method.
func (m *MockStore) GetSnapshot() (kvdb.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].(kvdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockStoreMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockStore)(nil).GetSnapshot))
}

// Has mocks base method.
func (m *MockStore) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockStoreMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockStore)(nil).Has), key)
}

// NewBatch mocks base method.
func (m *MockStore) NewBatch() kvdb.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(kvdb.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockStoreMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockStore)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockStore) NewIterator(prefix, start []byte) kvdb.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(kvdb.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockStoreMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockStore)(nil).NewIterator), prefix, start)
}

// Put mocks base method.
func (m *MockStore) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockStoreMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), key, value)
}

// Stat mocks base method.
func (m *MockStore) Stat() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockStoreMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockStore)(nil).Stat))
}

// MockDroper is a mock of Droper interface.
type MockDroper struct {
	ctrl     *gomock.Controller
	recorder *MockDroperMockRecorder
}

// MockDroperMockRecorder is the mock recorder for MockDroper.
type MockDroperMockRecorder struct {
	mock *MockDroper
}

// NewMockDroper creates a new mock instance.
func NewMockDroper(ctrl *gomock.Controller) *MockDroper {
	mock := &MockDroper{ctrl: ctrl}
	mock.recorder = &MockDroperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDroper) EXPECT() *MockDroperMockRecorder {
	return m.recorder
}

// Drop mocks base method.
func (m *MockDroper) Drop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop.
func (mr *MockDroperMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockDroper)(nil).Drop))
}

// MockFlushableKVStore is a mock of FlushableKVStore interface.
type MockFlushableKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockFlushableKVStoreMockRecorder
}

// MockFlushableKVStoreMockRecorder is the mock recorder for MockFlushableKVStore.
type MockFlushableKVStoreMockRecorder struct {
	mock *MockFlushableKVStore
}

// NewMockFlushableKVStore creates a new mock instance.
func NewMockFlushableKVStore(ctrl *gomock.Controller) *MockFlushableKVStore {
	mock := &MockFlushableKVStore{ctrl: ctrl}
	mock.recorder = &MockFlushableKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlushableKVStore) EXPECT() *MockFlushableKVStoreMockRecorder {
	return m.recorder
}

// AncientDatadir mocks base method.
func (m *MockFlushableKVStore) AncientDatadir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AncientDatadir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AncientDatadir indicates an expected call of AncientDatadir.
func (mr *MockFlushableKVStoreMockRecorder) AncientDatadir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AncientDatadir", reflect.TypeOf((*MockFlushableKVStore)(nil).AncientDatadir))
}

// Close mocks base method.
func (m *MockFlushableKVStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFlushableKVStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFlushableKVStore)(nil).Close))
}

// Compact mocks base method.
func (m *MockFlushableKVStore) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockFlushableKVStoreMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockFlushableKVStore)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockFlushableKVStore) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFlushableKVStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFlushableKVStore)(nil).Delete), key)
}

// Drop mocks base method.
func (m *MockFlushableKVStore) Drop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop.
func (mr *MockFlushableKVStoreMockRecorder) Drop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockFlushableKVStore)(nil).Drop))
}

// DropNotFlushed mocks base method.
func (m *MockFlushableKVStore) DropNotFlushed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DropNotFlushed")
}

// DropNotFlushed indicates an expected call of DropNotFlushed.
func (mr *MockFlushableKVStoreMockRecorder) DropNotFlushed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropNotFlushed", reflect.TypeOf((*MockFlushableKVStore)(nil).DropNotFlushed))
}

// Flush mocks base method.
func (m *MockFlushableKVStore) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockFlushableKVStoreMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFlushableKVStore)(nil).Flush))
}

// Get mocks base method.
func (m *MockFlushableKVStore) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFlushableKVStoreMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlushableKVStore)(nil).Get), key)
}

// GetSnapshot mocks base method.
func (m *MockFlushableKVStore) GetSnapshot() (kvdb.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot")
	ret0, _ := ret[0].(kvdb.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockFlushableKVStoreMockRecorder) GetSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockFlushableKVStore)(nil).GetSnapshot))
}

// Has mocks base method.
func (m *MockFlushableKVStore) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockFlushableKVStoreMockRecorder) Has(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockFlushableKVStore)(nil).Has), key)
}

// NewBatch mocks base method.
func (m *MockFlushableKVStore) NewBatch() kvdb.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(kvdb.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockFlushableKVStoreMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockFlushableKVStore)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockFlushableKVStore) NewIterator(prefix, start []byte) kvdb.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(kvdb.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockFlushableKVStoreMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockFlushableKVStore)(nil).NewIterator), prefix, start)
}

// NotFlushedPairs mocks base method.
func (m *MockFlushableKVStore) NotFlushedPairs() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFlushedPairs")
	ret0, _ := ret[0].(int)
	return ret0
}

// NotFlushedPairs indicates an expected call of NotFlushedPairs.
func (mr *MockFlushableKVStoreMockRecorder) NotFlushedPairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFlushedPairs", reflect.TypeOf((*MockFlushableKVStore)(nil).NotFlushedPairs))
}

// NotFlushedSizeEst mocks base method.
func (m *MockFlushableKVStore) NotFlushedSizeEst() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFlushedSizeEst")
	ret0, _ := ret[0].(int)
	return ret0
}

// NotFlushedSizeEst indicates an expected call of NotFlushedSizeEst.
func (mr *MockFlushableKVStoreMockRecorder) NotFlushedSizeEst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFlushedSizeEst", reflect.TypeOf((*MockFlushableKVStore)(nil).NotFlushedSizeEst))
}

// Put mocks base method.
func (m *MockFlushableKVStore) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockFlushableKVStoreMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFlushableKVStore)(nil).Put), key, value)
}

// Stat mocks base method.
func (m *MockFlushableKVStore) Stat(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFlushableKVStoreMockRecorder) Stat(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFlushableKVStore)(nil).Stat), property)
}

// MockDBProducer is a mock of DBProducer interface.
type MockDBProducer struct {
	ctrl     *gomock.Controller
	recorder *MockDBProducerMockRecorder
}

// MockDBProducerMockRecorder is the mock recorder for MockDBProducer.
type MockDBProducerMockRecorder struct {
	mock *MockDBProducer
}

// NewMockDBProducer creates a new mock instance.
func NewMockDBProducer(ctrl *gomock.Controller) *MockDBProducer {
	mock := &MockDBProducer{ctrl: ctrl}
	mock.recorder = &MockDBProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBProducer) EXPECT() *MockDBProducerMockRecorder {
	return m.recorder
}

// OpenDB mocks base method.
func (m *MockDBProducer) OpenDB(name string) (kvdb.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", name)
	ret0, _ := ret[0].(kvdb.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockDBProducerMockRecorder) OpenDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockDBProducer)(nil).OpenDB), name)
}

// MockIterable is a mock of Iterable interface.
type MockIterable struct {
	ctrl     *gomock.Controller
	recorder *MockIterableMockRecorder
}

// MockIterableMockRecorder is the mock recorder for MockIterable.
type MockIterableMockRecorder struct {
	mock *MockIterable
}

// NewMockIterable creates a new mock instance.
func NewMockIterable(ctrl *gomock.Controller) *MockIterable {
	mock := &MockIterable{ctrl: ctrl}
	mock.recorder = &MockIterableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterable) EXPECT() *MockIterableMockRecorder {
	return m.recorder
}

// Names mocks base method.
func (m *MockIterable) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockIterableMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockIterable)(nil).Names))
}

// MockIterableDBProducer is a mock of IterableDBProducer interface.
type MockIterableDBProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIterableDBProducerMockRecorder
}

// MockIterableDBProducerMockRecorder is the mock recorder for MockIterableDBProducer.
type MockIterableDBProducerMockRecorder struct {
	mock *MockIterableDBProducer
}

// NewMockIterableDBProducer creates a new mock instance.
func NewMockIterableDBProducer(ctrl *gomock.Controller) *MockIterableDBProducer {
	mock := &MockIterableDBProducer{ctrl: ctrl}
	mock.recorder = &MockIterableDBProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIterableDBProducer) EXPECT() *MockIterableDBProducerMockRecorder {
	return m.recorder
}

// Names mocks base method.
func (m *MockIterableDBProducer) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockIterableDBProducerMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockIterableDBProducer)(nil).Names))
}

// OpenDB mocks base method.
func (m *MockIterableDBProducer) OpenDB(name string) (kvdb.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", name)
	ret0, _ := ret[0].(kvdb.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockIterableDBProducerMockRecorder) OpenDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockIterableDBProducer)(nil).OpenDB), name)
}

// MockFlushableDBProducer is a mock of FlushableDBProducer interface.
type MockFlushableDBProducer struct {
	ctrl     *gomock.Controller
	recorder *MockFlushableDBProducerMockRecorder
}

// MockFlushableDBProducerMockRecorder is the mock recorder for MockFlushableDBProducer.
type MockFlushableDBProducerMockRecorder struct {
	mock *MockFlushableDBProducer
}

// NewMockFlushableDBProducer creates a new mock instance.
func NewMockFlushableDBProducer(ctrl *gomock.Controller) *MockFlushableDBProducer {
	mock := &MockFlushableDBProducer{ctrl: ctrl}
	mock.recorder = &MockFlushableDBProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlushableDBProducer) EXPECT() *MockFlushableDBProducerMockRecorder {
	return m.recorder
}

// Flush mocks base method.
func (m *MockFlushableDBProducer) Flush(id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockFlushableDBProducerMockRecorder) Flush(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFlushableDBProducer)(nil).Flush), id)
}

// NotFlushedSizeEst mocks base method.
func (m *MockFlushableDBProducer) NotFlushedSizeEst() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFlushedSizeEst")
	ret0, _ := ret[0].(int)
	return ret0
}

// NotFlushedSizeEst indicates an expected call of NotFlushedSizeEst.
func (mr *MockFlushableDBProducerMockRecorder) NotFlushedSizeEst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFlushedSizeEst", reflect.TypeOf((*MockFlushableDBProducer)(nil).NotFlushedSizeEst))
}

// OpenDB mocks base method.
func (m *MockFlushableDBProducer) OpenDB(name string) (kvdb.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", name)
	ret0, _ := ret[0].(kvdb.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockFlushableDBProducerMockRecorder) OpenDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockFlushableDBProducer)(nil).OpenDB), name)
}

// MockScopedFlushableProducer is a mock of ScopedFlushableProducer interface.
type MockScopedFlushableProducer struct {
	ctrl     *gomock.Controller
	recorder *MockScopedFlushableProducerMockRecorder
}

// MockScopedFlushableProducerMockRecorder is the mock recorder for MockScopedFlushableProducer.
type MockScopedFlushableProducerMockRecorder struct {
	mock *MockScopedFlushableProducer
}

// NewMockScopedFlushableProducer creates a new mock instance.
func NewMockScopedFlushableProducer(ctrl *gomock.Controller) *MockScopedFlushableProducer {
	mock := &MockScopedFlushableProducer{ctrl: ctrl}
	mock.recorder = &MockScopedFlushableProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopedFlushableProducer) EXPECT() *MockScopedFlushableProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScopedFlushableProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScopedFlushableProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScopedFlushableProducer)(nil).Close))
}

// Flush mocks base method.
func (m *MockScopedFlushableProducer) Flush(id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockScopedFlushableProducerMockRecorder) Flush(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockScopedFlushableProducer)(nil).Flush), id)
}

// Initialize mocks base method.
func (m *MockScopedFlushableProducer) Initialize(dbNames []string, flushID []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", dbNames, flushID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockScopedFlushableProducerMockRecorder) Initialize(dbNames, flushID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockScopedFlushableProducer)(nil).Initialize), dbNames, flushID)
}

// NotFlushedSizeEst mocks base method.
func (m *MockScopedFlushableProducer) NotFlushedSizeEst() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFlushedSizeEst")
	ret0, _ := ret[0].(int)
	return ret0
}

// NotFlushedSizeEst indicates an expected call of NotFlushedSizeEst.
func (mr *MockScopedFlushableProducerMockRecorder) NotFlushedSizeEst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFlushedSizeEst", reflect.TypeOf((*MockScopedFlushableProducer)(nil).NotFlushedSizeEst))
}

// OpenDB mocks base method.
func (m *MockScopedFlushableProducer) OpenDB(name string) (kvdb.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", name)
	ret0, _ := ret[0].(kvdb.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockScopedFlushableProducerMockRecorder) OpenDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockScopedFlushableProducer)(nil).OpenDB), name)
}

// MockFullDBProducer is a mock of FullDBProducer interface.
type MockFullDBProducer struct {
	ctrl     *gomock.Controller
	recorder *MockFullDBProducerMockRecorder
}

// MockFullDBProducerMockRecorder is the mock recorder for MockFullDBProducer.
type MockFullDBProducerMockRecorder struct {
	mock *MockFullDBProducer
}

// NewMockFullDBProducer creates a new mock instance.
func NewMockFullDBProducer(ctrl *gomock.Controller) *MockFullDBProducer {
	mock := &MockFullDBProducer{ctrl: ctrl}
	mock.recorder = &MockFullDBProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFullDBProducer) EXPECT() *MockFullDBProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFullDBProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFullDBProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFullDBProducer)(nil).Close))
}

// Flush mocks base method.
func (m *MockFullDBProducer) Flush(id []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockFullDBProducerMockRecorder) Flush(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFullDBProducer)(nil).Flush), id)
}

// Initialize mocks base method.
func (m *MockFullDBProducer) Initialize(dbNames []string, flushID []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", dbNames, flushID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockFullDBProducerMockRecorder) Initialize(dbNames, flushID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockFullDBProducer)(nil).Initialize), dbNames, flushID)
}

// Names mocks base method.
func (m *MockFullDBProducer) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockFullDBProducerMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockFullDBProducer)(nil).Names))
}

// NotFlushedSizeEst mocks base method.
func (m *MockFullDBProducer) NotFlushedSizeEst() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotFlushedSizeEst")
	ret0, _ := ret[0].(int)
	return ret0
}

// NotFlushedSizeEst indicates an expected call of NotFlushedSizeEst.
func (mr *MockFullDBProducerMockRecorder) NotFlushedSizeEst() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFlushedSizeEst", reflect.TypeOf((*MockFullDBProducer)(nil).NotFlushedSizeEst))
}

// OpenDB mocks base method.
func (m *MockFullDBProducer) OpenDB(name string) (kvdb.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", name)
	ret0, _ := ret[0].(kvdb.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockFullDBProducerMockRecorder) OpenDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockFullDBProducer)(nil).OpenDB), name)
}
